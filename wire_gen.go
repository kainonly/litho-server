// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"api/app"
	"api/app/departments"
	"api/app/feishu"
	"api/app/pages"
	"api/app/pictures"
	"api/app/roles"
	"api/app/system"
	"api/app/users"
	"api/bootstrap"
	"api/common"
	"github.com/gin-gonic/gin"
	"github.com/weplanx/go/engine"
)

// Injectors from wire.go:

func App(value *common.Values) (*gin.Engine, error) {
	client, err := bootstrap.UseMongoDB(value)
	if err != nil {
		return nil, err
	}
	database := bootstrap.UseDatabase(client, value)
	redisClient, err := bootstrap.UseRedis(value)
	if err != nil {
		return nil, err
	}
	conn, err := bootstrap.UseNats(value)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := bootstrap.UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	openAPI := bootstrap.UseOpenapi(value)
	cipher, err := bootstrap.UseCipher(value)
	if err != nil {
		return nil, err
	}
	hid, err := bootstrap.UseHID(value)
	if err != nil {
		return nil, err
	}
	cosClient, err := bootstrap.UseCos(value)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		Values:      value,
		MongoClient: client,
		Db:          database,
		Redis:       redisClient,
		Nats:        conn,
		Js:          jetStreamContext,
		Open:        openAPI,
		Cipher:      cipher,
		HID:         hid,
		Cos:         cosClient,
	}
	service := &users.Service{
		Inject: inject,
	}
	systemService := &system.Service{
		Inject: inject,
		Users:  service,
	}
	passport := bootstrap.UsePassport(value)
	transfer, err := bootstrap.UseTransfer(value, jetStreamContext)
	if err != nil {
		return nil, err
	}
	middleware := &system.Middleware{
		Service:  systemService,
		Passport: passport,
		Transfer: transfer,
	}
	rolesService := &roles.Service{
		Inject: inject,
	}
	departmentsService := &departments.Service{
		Inject: inject,
	}
	pagesService := &pages.Service{
		Inject: inject,
	}
	controller := &system.Controller{
		Service:     systemService,
		Users:       service,
		Roles:       rolesService,
		Departments: departmentsService,
		Pages:       pagesService,
		Passport:    passport,
	}
	engineEngine := bootstrap.UseEngine(value, jetStreamContext)
	engineService := &engine.Service{
		Engine: engineEngine,
		Db:     database,
	}
	engineController := &engine.Controller{
		Engine:  engineEngine,
		Service: engineService,
	}
	pagesController := &pages.Controller{
		Service: pagesService,
	}
	feishuService := feishu.NewService(inject)
	feishuController := &feishu.Controller{
		Service:  feishuService,
		System:   systemService,
		Users:    service,
		Passport: passport,
	}
	picturesService := &pictures.Service{
		Inject: inject,
	}
	picturesController := &pictures.Controller{
		Service: picturesService,
	}
	ginEngine := app.New(value, middleware, controller, engineController, pagesController, feishuController, picturesController)
	return ginEngine, nil
}
