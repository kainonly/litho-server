// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"api/app"
	"api/app/index"
	"api/app/x"
	"api/app/x/admin"
	"api/app/x/devops"
	"api/app/x/page"
	"api/app/x/schema"
	"api/bootstrap"
	"api/common"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func API() (*gin.Engine, error) {
	set, err := bootstrap.LoadSettings()
	if err != nil {
		return nil, err
	}
	passport := bootstrap.InitializePassport(set)
	cookieHelper := bootstrap.InitializeCookie(set)
	client, err := bootstrap.InitializeMongoDB(set)
	if err != nil {
		return nil, err
	}
	database := bootstrap.InitializeDatabase(set, client)
	redisClient, err := bootstrap.InitializeRedis(set)
	if err != nil {
		return nil, err
	}
	cipherHelper, err := bootstrap.InitializeCipher(set)
	if err != nil {
		return nil, err
	}
	commonApp := &common.App{
		Set:      set,
		Mongo:    client,
		Db:       database,
		Redis:    redisClient,
		Cookie:   cookieHelper,
		Cipher:   cipherHelper,
		Passport: passport,
	}
	injectService := &index.InjectService{
		App: commonApp,
	}
	service := index.NewService(injectService)
	injectController := &index.InjectController{
		App:     commonApp,
		Service: service,
	}
	controller := index.NewController(injectController)
	api := bootstrap.InitializeCommonApi(client, database)
	xInjectService := &x.InjectService{
		App: commonApp,
	}
	xService := x.NewService(xInjectService)
	adminInjectService := &admin.InjectService{
		App: commonApp,
	}
	adminService := admin.NewService(adminInjectService)
	pageInjectService := &page.InjectService{
		App: commonApp,
	}
	pageService := page.NewService(pageInjectService)
	xInjectController := &x.InjectController{
		App:          commonApp,
		Service:      xService,
		AdminService: adminService,
		PageService:  pageService,
	}
	xController := x.NewController(xInjectController)
	devopsInjectService := &devops.InjectService{
		App: commonApp,
	}
	devopsService := devops.NewService(devopsInjectService)
	devopsInjectController := &devops.InjectController{
		App:     commonApp,
		Service: devopsService,
	}
	devopsController := devops.NewController(devopsInjectController)
	schemaInjectService := &schema.InjectService{
		App: commonApp,
	}
	schemaService := schema.NewService(schemaInjectService)
	schemaInjectController := &schema.InjectController{
		App:     commonApp,
		Service: schemaService,
	}
	schemaController := schema.NewController(schemaInjectController)
	engine := app.HttpServer(set, passport, cookieHelper, controller, api, xController, devopsController, schemaController)
	return engine, nil
}
