// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/api/api"
	"github.com/weplanx/api/api/departments"
	"github.com/weplanx/api/api/dsl"
	"github.com/weplanx/api/api/index"
	"github.com/weplanx/api/api/pages"
	"github.com/weplanx/api/api/roles"
	"github.com/weplanx/api/api/sessions"
	"github.com/weplanx/api/api/users"
	"github.com/weplanx/api/api/values"
	"github.com/weplanx/api/common"
)

// Injectors from wire.go:

func NewAPI() (*api.API, error) {
	commonValues, err := LoadStaticValues()
	if err != nil {
		return nil, err
	}
	client, err := UseMongoDB(commonValues)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(client, commonValues)
	redisClient, err := UseRedis(commonValues)
	if err != nil {
		return nil, err
	}
	conn, err := UseNats(commonValues)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		Values: commonValues,
		Mongo:  client,
		Db:     database,
		Redis:  redisClient,
		Nats:   conn,
	}
	hertz, err := UseHertz(commonValues)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	transfer, err := UseTransfer(commonValues, jetStreamContext)
	if err != nil {
		return nil, err
	}
	service := &sessions.Service{
		Inject: inject,
	}
	pagesService := &pages.Service{
		Inject: inject,
	}
	rolesService := &roles.Service{
		Inject: inject,
	}
	departmentsService := &departments.Service{
		Inject: inject,
	}
	usersService := &users.Service{
		Inject:             inject,
		RolesService:       rolesService,
		DepartmentsService: departmentsService,
	}
	captcha := UseCaptcha(commonValues, redisClient)
	locker := UseLocker(commonValues, redisClient)
	indexService := &index.Service{
		Inject:             inject,
		SessionService:     service,
		PagesService:       pagesService,
		UsersService:       usersService,
		RolesService:       rolesService,
		DepartmentsService: departmentsService,
		Captcha:            captcha,
		Locker:             locker,
	}
	controller := &index.Controller{
		IndexService: indexService,
	}
	valuesService := &values.Service{
		Inject: inject,
	}
	valuesController := &values.Controller{
		ValuesService: valuesService,
	}
	sessionsController := &sessions.Controller{
		SessionsService: service,
	}
	dslService := &dsl.Service{
		Inject: inject,
	}
	dslController := &dsl.Controller{
		DslService: dslService,
	}
	pagesController := &pages.Controller{
		PagesService: pagesService,
	}
	usersController := &users.Controller{
		UsersService: usersService,
	}
	apiAPI := &api.API{
		Inject:            inject,
		Hertz:             hertz,
		Transfer:          transfer,
		IndexController:   controller,
		IndexService:      indexService,
		ValuesController:  valuesController,
		ValuesService:     valuesService,
		SessionController: sessionsController,
		SessionService:    service,
		DslController:     dslController,
		DslService:        dslService,
		PagesController:   pagesController,
		PagesService:      pagesService,
		UsersController:   usersController,
		UsersService:      usersService,
	}
	return apiAPI, nil
}
