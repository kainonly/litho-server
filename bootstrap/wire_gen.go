// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/go/rest"
	"github.com/weplanx/go/sessions"
	"github.com/weplanx/go/values"
	"github.com/weplanx/server/api"
	"github.com/weplanx/server/api/clusters"
	"github.com/weplanx/server/api/datasets"
	"github.com/weplanx/server/api/imessages"
	"github.com/weplanx/server/api/index"
	"github.com/weplanx/server/api/lark"
	"github.com/weplanx/server/api/observability"
	"github.com/weplanx/server/api/queues"
	"github.com/weplanx/server/api/schedules"
	"github.com/weplanx/server/api/tencent"
	"github.com/weplanx/server/api/workflows"
	"github.com/weplanx/server/common"
)

// Injectors from wire.go:

func NewAPI(values2 *common.Values) (*api.API, error) {
	client, err := UseMongoDB(values2)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(values2, client)
	redisClient, err := UseRedis(values2)
	if err != nil {
		return nil, err
	}
	influxdb2Client := UseInflux(values2)
	conn, err := UseNats(values2)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	cipher, err := UseCipher(values2)
	if err != nil {
		return nil, err
	}
	passport := UsePassport(values2)
	captcha := UseCaptcha(values2, redisClient)
	locker := UseLocker(values2, redisClient)
	workflow := UseWorkflow(values2, conn, jetStreamContext)
	inject := &common.Inject{
		V:         values2,
		Mgo:       client,
		Db:        database,
		RDb:       redisClient,
		Flux:      influxdb2Client,
		JetStream: jetStreamContext,
		KeyValue:  keyValue,
		Cipher:    cipher,
		Passport:  passport,
		Captcha:   captcha,
		Locker:    locker,
		Workflow:  workflow,
	}
	hertz, err := UseHertz(values2)
	if err != nil {
		return nil, err
	}
	csrf := UseCsrf(values2)
	transfer, err := UseTransfer(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	service := UseValues(values2, keyValue, cipher)
	controller := &values.Controller{
		Service: service,
	}
	sessionsService := UseSessions(values2, redisClient)
	sessionsController := &sessions.Controller{
		Service: sessionsService,
	}
	restService := UseRest(values2, client, database, redisClient, jetStreamContext, keyValue, cipher)
	restController := &rest.Controller{
		Service: restService,
	}
	tencentService := &tencent.Service{
		Inject: inject,
	}
	indexService := &index.Service{
		Inject:   inject,
		Sessions: sessionsService,
		Tencent:  tencentService,
	}
	indexController := &index.Controller{
		V:             values2,
		Csrf:          csrf,
		IndexService:  indexService,
		ValuesService: service,
	}
	tencentController := &tencent.Controller{
		TencentService: tencentService,
	}
	larkService := &lark.Service{
		Inject:   inject,
		Sessions: sessionsService,
		Locker:   locker,
		Passport: passport,
		Index:    indexService,
	}
	larkController := &lark.Controller{
		Values:       values2,
		Passport:     passport,
		LarkService:  larkService,
		IndexService: indexService,
	}
	clustersService := &clusters.Service{
		Inject: inject,
	}
	clustersController := &clusters.Controller{
		ClustersService: clustersService,
	}
	schedulesService := &schedules.Service{
		Inject:   inject,
		Clusters: clustersService,
	}
	schedulesController := &schedules.Controller{
		SchedulesService: schedulesService,
	}
	workflowsService := &workflows.Service{
		Inject:    inject,
		Schedules: schedulesService,
	}
	workflowsController := &workflows.Controller{
		WorkflowsService: workflowsService,
	}
	queuesService := &queues.Service{
		Inject: inject,
	}
	queuesController := &queues.Controller{
		QueuesServices: queuesService,
	}
	imessagesService := &imessages.Service{
		Inject: inject,
	}
	imessagesController := &imessages.Controller{
		ImessagesServices: imessagesService,
	}
	datasetsService := &datasets.Service{
		Inject: inject,
		Values: service,
	}
	datasetsController := &datasets.Controller{
		DatasetsService: datasetsService,
	}
	observabilityService := &observability.Service{
		Inject: inject,
	}
	observabilityController := &observability.Controller{
		ObservabilityService: observabilityService,
	}
	apiAPI := &api.API{
		Inject:               inject,
		Hertz:                hertz,
		Csrf:                 csrf,
		Transfer:             transfer,
		Values:               controller,
		Sessions:             sessionsController,
		Rest:                 restController,
		Index:                indexController,
		IndexService:         indexService,
		Tencent:              tencentController,
		TencentService:       tencentService,
		Lark:                 larkController,
		LarkService:          larkService,
		Clusters:             clustersController,
		ClustersService:      clustersService,
		Schedules:            schedulesController,
		SchedulesService:     schedulesService,
		Workflows:            workflowsController,
		WorkflowsService:     workflowsService,
		Queues:               queuesController,
		QueuesService:        queuesService,
		Imessages:            imessagesController,
		ImessagesService:     imessagesService,
		Datasets:             datasetsController,
		DatasetsService:      datasetsService,
		Observability:        observabilityController,
		ObservabilityService: observabilityService,
	}
	return apiAPI, nil
}
