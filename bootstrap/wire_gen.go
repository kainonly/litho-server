// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/server/api"
	"github.com/weplanx/server/api/feishu"
	"github.com/weplanx/server/api/index"
	"github.com/weplanx/server/api/monitor"
	"github.com/weplanx/server/api/projects"
	"github.com/weplanx/server/api/tencent"
	"github.com/weplanx/server/common"
	"github.com/weplanx/utils/kv"
	"github.com/weplanx/utils/resources"
	"github.com/weplanx/utils/sessions"
)

// Injectors from wire.go:

func NewAPI(values *common.Values) (*api.API, error) {
	client, err := UseMongoDB(values)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(values, client)
	redisClient, err := UseRedis(values)
	if err != nil {
		return nil, err
	}
	influxdb2Client := UseInflux(values)
	conn, err := UseNats(values)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values, jetStreamContext)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		Values:    values,
		Mongo:     client,
		Db:        database,
		Redis:     redisClient,
		Influx:    influxdb2Client,
		Nats:      conn,
		JetStream: jetStreamContext,
		KeyValue:  keyValue,
	}
	hertz, err := UseHertz(values)
	if err != nil {
		return nil, err
	}
	csrf := UseCsrf(values)
	kvKV := UseKV(values, keyValue)
	service := &kv.Service{
		KV: kvKV,
	}
	controller := &kv.Controller{
		KVService: service,
	}
	sessionsSessions := UseSessions(values, redisClient)
	sessionsService := &sessions.Service{
		Sessions: sessionsSessions,
	}
	sessionsController := &sessions.Controller{
		SessionsService: sessionsService,
	}
	transfer, err := UseTransfer(values, database, jetStreamContext)
	if err != nil {
		return nil, err
	}
	dsl, err := UseDSL(values, client, database, redisClient)
	if err != nil {
		return nil, err
	}
	resourcesService := &resources.Service{
		DSL: dsl,
	}
	resourcesController := &resources.Controller{
		Service: resourcesService,
	}
	passport := UsePassport(values)
	locker := UseLocker(values, redisClient)
	captcha := UseCaptcha(values, redisClient)
	indexService := &index.Service{
		Inject:   inject,
		Passport: passport,
		Locker:   locker,
		Captcha:  captcha,
		Sessions: sessionsService,
	}
	indexController := &index.Controller{
		Service: indexService,
		Csrf:    csrf,
		Values:  values,
	}
	projectsService := &projects.Service{
		Inject: inject,
	}
	projectsController := &projects.Controller{
		ProjectsService: projectsService,
	}
	feishuService := &feishu.Service{
		Inject:          inject,
		SessionsService: sessionsService,
		Locker:          locker,
		Passport:        passport,
	}
	feishuController := &feishu.Controller{
		Service:  feishuService,
		Index:    indexService,
		Values:   values,
		Passport: passport,
	}
	tencentService := &tencent.Service{
		Inject: inject,
	}
	tencentController := &tencent.Controller{
		TencentService: tencentService,
	}
	monitorService := &monitor.Service{
		Inject: inject,
	}
	monitorController := &monitor.Controller{
		MonitorService: monitorService,
	}
	apiAPI := &api.API{
		Inject:    inject,
		Hertz:     hertz,
		Csrf:      csrf,
		KV:        controller,
		Sessions:  sessionsController,
		Transfer:  transfer,
		Resources: resourcesController,
		Index:     indexController,
		Projects:  projectsController,
		Feishu:    feishuController,
		Tencent:   tencentController,
		Monitor:   monitorController,
		MonitorX:  monitorService,
	}
	return apiAPI, nil
}
