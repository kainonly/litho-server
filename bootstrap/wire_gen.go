// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/server/api"
	"github.com/weplanx/server/api/index"
	"github.com/weplanx/server/api/sessions"
	"github.com/weplanx/server/api/values"
	"github.com/weplanx/server/common"
	"github.com/weplanx/server/utils/locker"
	"github.com/weplanx/server/utils/passport"
)

// Injectors from wire.go:

func NewAPI(values2 *common.Values) (*api.API, error) {
	client, err := UseMongoDB(values2)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(values2, client)
	redisClient, err := UseRedis(values2)
	if err != nil {
		return nil, err
	}
	conn, err := UseNats(values2)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	transfer, err := UseTransfer(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		Values:    values2,
		Mongo:     client,
		Db:        database,
		Redis:     redisClient,
		Nats:      conn,
		JetStream: jetStreamContext,
		KeyValue:  keyValue,
		Transfer:  transfer,
	}
	hertz, err := UseHertz(values2)
	if err != nil {
		return nil, err
	}
	service := &sessions.Service{
		Inject: inject,
	}
	passportPassport := &passport.Passport{
		Values: values2,
	}
	lockerLocker := &locker.Locker{
		Values: values2,
		Redis:  redisClient,
	}
	indexService := &index.Service{
		Inject:   inject,
		Sessions: service,
		Passport: passportPassport,
		Locker:   lockerLocker,
	}
	controller := &index.Controller{
		IndexService: indexService,
	}
	valuesService := &values.Service{
		Inject: inject,
	}
	valuesController := &values.Controller{
		ValuesService: valuesService,
	}
	sessionsController := &sessions.Controller{
		SessionsService: service,
	}
	apiAPI := &api.API{
		Inject:             inject,
		Hertz:              hertz,
		IndexController:    controller,
		IndexService:       indexService,
		ValuesController:   valuesController,
		ValuesService:      valuesService,
		SessionsController: sessionsController,
		SessionsService:    service,
	}
	return apiAPI, nil
}
