// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/go/rest"
	"github.com/weplanx/go/sessions"
	"github.com/weplanx/go/values"
	"github.com/weplanx/server/api"
	"github.com/weplanx/server/api/acc_tasks"
	"github.com/weplanx/server/api/clusters"
	"github.com/weplanx/server/api/datasets"
	"github.com/weplanx/server/api/imessages"
	"github.com/weplanx/server/api/index"
	"github.com/weplanx/server/api/lark"
	"github.com/weplanx/server/api/monitor"
	"github.com/weplanx/server/api/projects"
	"github.com/weplanx/server/api/queues"
	"github.com/weplanx/server/api/schedules"
	"github.com/weplanx/server/api/tencent"
	"github.com/weplanx/server/api/workflows"
	"github.com/weplanx/server/common"
	"github.com/weplanx/server/openapi"
	index3 "github.com/weplanx/server/openapi/index"
	"github.com/weplanx/server/xapi"
	"github.com/weplanx/server/xapi/emqx"
	index2 "github.com/weplanx/server/xapi/index"
)

// Injectors from wire.go:

func NewAPI(values2 *common.Values) (*api.API, error) {
	client, err := UseMongoDB(values2)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(values2, client)
	redisClient, err := UseRedis(values2)
	if err != nil {
		return nil, err
	}
	conn, err := UseNats(values2)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	cipher, err := UseCipher(values2)
	if err != nil {
		return nil, err
	}
	captcha := UseCaptcha(redisClient)
	locker := UseLocker(redisClient)
	clientClient, err := UseTransfer(jetStreamContext)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		V:         values2,
		Mgo:       client,
		Db:        database,
		RDb:       redisClient,
		Nats:      conn,
		JetStream: jetStreamContext,
		KeyValue:  keyValue,
		Cipher:    cipher,
		Captcha:   captcha,
		Locker:    locker,
		Transfer:  clientClient,
	}
	hertz, err := UseHertz(values2)
	if err != nil {
		return nil, err
	}
	csrf := UseCsrf(values2)
	service := UseValues(keyValue, cipher)
	controller := &values.Controller{
		Service: service,
	}
	sessionsService := UseSessions(values2, redisClient)
	sessionsController := &sessions.Controller{
		Service: sessionsService,
	}
	restService := UseRest(values2, client, database, redisClient, jetStreamContext, keyValue, cipher)
	restController := &rest.Controller{
		Service: restService,
	}
	tencentService := &tencent.Service{
		Inject: inject,
	}
	passport := UseAPIPassport(values2)
	indexService := &index.Service{
		Inject:   inject,
		Sessions: sessionsService,
		Tencent:  tencentService,
		Passport: passport,
	}
	indexController := &index.Controller{
		V:             values2,
		Csrf:          csrf,
		IndexService:  indexService,
		ValuesService: service,
	}
	tencentController := &tencent.Controller{
		TencentService: tencentService,
	}
	larkService := &lark.Service{
		Inject:   inject,
		Sessions: sessionsService,
		Locker:   locker,
		Passport: passport,
		Index:    indexService,
	}
	larkController := &lark.Controller{
		V:            values2,
		Passport:     passport,
		LarkService:  larkService,
		IndexService: indexService,
	}
	clustersService := &clusters.Service{
		Inject: inject,
	}
	projectsService := &projects.Service{
		Inject:   inject,
		Clusters: clustersService,
	}
	projectsController := &projects.Controller{
		ProjectsServices: projectsService,
	}
	clustersController := &clusters.Controller{
		ClustersService: clustersService,
	}
	schedulesService := &schedules.Service{
		Inject: inject,
	}
	schedulesController := &schedules.Controller{
		SchedulesService: schedulesService,
	}
	workflowsService := &workflows.Service{
		Inject:    inject,
		Schedules: schedulesService,
	}
	workflowsController := &workflows.Controller{
		WorkflowsService: workflowsService,
	}
	queuesService := &queues.Service{
		Inject: inject,
	}
	queuesController := &queues.Controller{
		QueuesServices: queuesService,
	}
	imessagesService := &imessages.Service{
		Inject: inject,
	}
	imessagesController := &imessages.Controller{
		ImessagesServices: imessagesService,
	}
	acc_tasksService := &acc_tasks.Service{
		Inject:         inject,
		TencentService: tencentService,
	}
	acc_tasksController := &acc_tasks.Controller{
		AccTasksService: acc_tasksService,
	}
	datasetsService := &datasets.Service{
		Inject: inject,
		Values: service,
	}
	datasetsController := &datasets.Controller{
		DatasetsService: datasetsService,
	}
	influxdb2Client := UseInflux(values2)
	monitorService := &monitor.Service{
		Inject: inject,
		Flux:   influxdb2Client,
	}
	monitorController := &monitor.Controller{
		MonitorService: monitorService,
	}
	apiAPI := &api.API{
		Inject:           inject,
		Hertz:            hertz,
		Csrf:             csrf,
		Values:           controller,
		Sessions:         sessionsController,
		Rest:             restController,
		Index:            indexController,
		IndexService:     indexService,
		Tencent:          tencentController,
		TencentService:   tencentService,
		Lark:             larkController,
		LarkService:      larkService,
		Projects:         projectsController,
		ProjectsService:  projectsService,
		Clusters:         clustersController,
		ClustersService:  clustersService,
		Schedules:        schedulesController,
		SchedulesService: schedulesService,
		Workflows:        workflowsController,
		WorkflowsService: workflowsService,
		Queues:           queuesController,
		QueuesService:    queuesService,
		Imessages:        imessagesController,
		ImessagesService: imessagesService,
		AccTasks:         acc_tasksController,
		AccTasksService:  acc_tasksService,
		Datasets:         datasetsController,
		DatasetsService:  datasetsService,
		Monitor:          monitorController,
		MonitorService:   monitorService,
	}
	return apiAPI, nil
}

func NewXAPI(values2 *common.Values) (*xapi.API, error) {
	client, err := UseMongoDB(values2)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(values2, client)
	redisClient, err := UseRedis(values2)
	if err != nil {
		return nil, err
	}
	conn, err := UseNats(values2)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	cipher, err := UseCipher(values2)
	if err != nil {
		return nil, err
	}
	captcha := UseCaptcha(redisClient)
	locker := UseLocker(redisClient)
	clientClient, err := UseTransfer(jetStreamContext)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		V:         values2,
		Mgo:       client,
		Db:        database,
		RDb:       redisClient,
		Nats:      conn,
		JetStream: jetStreamContext,
		KeyValue:  keyValue,
		Cipher:    cipher,
		Captcha:   captcha,
		Locker:    locker,
		Transfer:  clientClient,
	}
	hertz, err := UseHertz(values2)
	if err != nil {
		return nil, err
	}
	service := &index2.Service{
		Inject: inject,
	}
	controller := &index2.Controller{
		IndexService: service,
	}
	emqxService := &emqx.Service{
		Inject: inject,
	}
	emqxController := &emqx.Controller{
		EmqxService: emqxService,
	}
	xapiAPI := &xapi.API{
		Inject:       inject,
		Hertz:        hertz,
		Index:        controller,
		IndexService: service,
		Emqx:         emqxController,
		EmqxService:  emqxService,
	}
	return xapiAPI, nil
}

func NewOpenAPI(values2 *common.Values) (*openapi.API, error) {
	client, err := UseMongoDB(values2)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(values2, client)
	redisClient, err := UseRedis(values2)
	if err != nil {
		return nil, err
	}
	conn, err := UseNats(values2)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	cipher, err := UseCipher(values2)
	if err != nil {
		return nil, err
	}
	captcha := UseCaptcha(redisClient)
	locker := UseLocker(redisClient)
	clientClient, err := UseTransfer(jetStreamContext)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		V:         values2,
		Mgo:       client,
		Db:        database,
		RDb:       redisClient,
		Nats:      conn,
		JetStream: jetStreamContext,
		KeyValue:  keyValue,
		Cipher:    cipher,
		Captcha:   captcha,
		Locker:    locker,
		Transfer:  clientClient,
	}
	hertz, err := UseHertz(values2)
	if err != nil {
		return nil, err
	}
	service := &index3.Service{
		Inject: inject,
	}
	controller := &index3.Controller{
		IndexService: service,
	}
	openapiAPI := &openapi.API{
		Inject:       inject,
		Hertz:        hertz,
		Index:        controller,
		IndexService: service,
	}
	return openapiAPI, nil
}
