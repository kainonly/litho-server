// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/server/api"
	"github.com/weplanx/server/api/feishu"
	"github.com/weplanx/server/api/index"
	"github.com/weplanx/server/api/monitor"
	"github.com/weplanx/server/api/tencent"
	"github.com/weplanx/server/common"
	"github.com/weplanx/utils/resources"
	"github.com/weplanx/utils/sessions"
	"github.com/weplanx/utils/values"
)

// Injectors from wire.go:

func NewAPI(values2 *common.Values) (*api.API, error) {
	client, err := UseMongoDB(values2)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(values2, client)
	redisClient, err := UseRedis(values2)
	if err != nil {
		return nil, err
	}
	influxdb2Client := UseInflux(values2)
	conn, err := UseNats(values2)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		V:    values2,
		Mgo:  client,
		Db:   database,
		RDb:  redisClient,
		Flux: influxdb2Client,
		Nats: conn,
		JS:   jetStreamContext,
		KV:   keyValue,
	}
	hertz, err := UseHertz(values2)
	if err != nil {
		return nil, err
	}
	csrf := UseCsrf(values2)
	transfer, err := UseTransfer(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	service := UseValues(values2, keyValue)
	controller := &values.Controller{
		Service: service,
	}
	sessionsService := UseSessions(values2, redisClient)
	sessionsController := &sessions.Controller{
		Service: sessionsService,
	}
	resourcesService, err := UseResources(values2, client, database, redisClient)
	if err != nil {
		return nil, err
	}
	resourcesController := &resources.Controller{
		Service: resourcesService,
	}
	passport := UsePassport(values2)
	locker := UseLocker(values2, redisClient)
	captcha := UseCaptcha(values2, redisClient)
	indexService := &index.Service{
		Inject:   inject,
		Passport: passport,
		Locker:   locker,
		Captcha:  captcha,
		Sessions: sessionsService,
	}
	indexController := &index.Controller{
		Service: indexService,
		Csrf:    csrf,
		Values:  values2,
	}
	feishuService := &feishu.Service{
		Inject:          inject,
		SessionsService: sessionsService,
		Locker:          locker,
		Passport:        passport,
	}
	feishuController := &feishu.Controller{
		Service:  feishuService,
		Index:    indexService,
		Values:   values2,
		Passport: passport,
	}
	tencentService := &tencent.Service{
		Inject: inject,
	}
	tencentController := &tencent.Controller{
		TencentService: tencentService,
	}
	monitorService := &monitor.Service{
		Inject: inject,
	}
	monitorController := &monitor.Controller{
		MonitorService: monitorService,
	}
	apiAPI := &api.API{
		Inject:    inject,
		Hertz:     hertz,
		Csrf:      csrf,
		Transfer:  transfer,
		Values:    controller,
		Sessions:  sessionsController,
		Resources: resourcesController,
		Index:     indexController,
		Feishu:    feishuController,
		Tencent:   tencentController,
		Monitor:   monitorController,
		MonitorX:  monitorService,
	}
	return apiAPI, nil
}
