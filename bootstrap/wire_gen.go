// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/server/api"
	"github.com/weplanx/server/api/index"
	"github.com/weplanx/server/common"
	"github.com/weplanx/server/utils/locker"
)

// Injectors from wire.go:

func NewAPI(values *common.Values) (*api.API, error) {
	db, err := UseGorm(values)
	if err != nil {
		return nil, err
	}
	client, err := UseRedis(values)
	if err != nil {
		return nil, err
	}
	conn, err := UseNats(values)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values, jetStreamContext)
	if err != nil {
		return nil, err
	}
	transfer, err := UseTransfer(values, jetStreamContext)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		Values:    values,
		Db:        db,
		Redis:     client,
		Nats:      conn,
		JetStream: jetStreamContext,
		KeyValue:  keyValue,
		Transfer:  transfer,
	}
	hertz, err := UseHertz(values)
	if err != nil {
		return nil, err
	}
	lockerLocker := &locker.Locker{
		Values: values,
		Redis:  client,
	}
	service := &index.Service{
		Inject: inject,
		Locker: lockerLocker,
	}
	controller := &index.Controller{
		IndexService: service,
	}
	apiAPI := &api.API{
		Inject:          inject,
		Hertz:           hertz,
		IndexController: controller,
		IndexService:    service,
	}
	return apiAPI, nil
}
